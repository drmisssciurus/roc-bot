import asyncio
import logging
import re
import time

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ConversationHandler, CallbackContext, ContextTypes

from database.db_connectior import keys_map, players_keys, db
from config import CHAT_ID, evgeniya_tiamat_id, igor_krivic_id, dadjezz_id

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
	format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

from states import *


def build_keyboard(button, n_per_row=2):
	return InlineKeyboardMarkup(
		[button[i:i + n_per_row] for i in range(0, len(button), n_per_row)]
	)


async def start(update: Update, context: CallbackContext) -> int:
	print('Start clicked')
	# print(update.effective_message.from_user.username)
	# print(update.effective_message.from_user.id)
	logger.info('start function called')
	reply_keyboard = [
		[
			InlineKeyboardButton("–ú–∞—Å—Ç–µ—Ä", callback_data="master"),
			InlineKeyboardButton("–ò–≥—Ä–æ–∫", callback_data="player"),
		],

	]
	reply_markup = InlineKeyboardMarkup(reply_keyboard)
	await update.effective_message.reply_text(
		'–í—ã–±–µ—Ä–∏ –∫—Ç–æ —Ç—ã?',
		reply_markup=reply_markup,
	)
	return initial_state


# async def back(update: Update, context: CallbackContext) -> int:
#

async def handle_role_selection(update: Update, context: CallbackContext):
	print("first_selection")
	query = update.callback_query
	await query.answer()
	if query.data == 'master':
		return await start_master_conversation(update, context)
	elif query.data == 'player':
		return await start_player_conversation(update, context)


async def start_master_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE, is_first_time=True) -> int:
	context.user_data.clear()
	master_id = str(update.callback_query.from_user.username)
	print('masterID:' + master_id)
	context.user_data["master_id"] = master_id

	print('get_master_branch clicked')
	reply_keyboard = [
		[
			InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏",
								 callback_data="master_applications"),
			InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É",
								 callback_data="new_master_application"),

		],
		[
			InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_again"),
		]
	]
	reply_markup = InlineKeyboardMarkup(reply_keyboard)
	# await update.effective_message.edit_text(text=f'–ü—Ä–∏–≤–µ—Ç {master_id}! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?',
	# 											  reply_markup=reply_markup)
	if is_first_time:
		await update.effective_message.edit_text(text=f'–ü—Ä–∏–≤–µ—Ç {master_id}! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?',
												 reply_markup=reply_markup)
	else:
		await update.effective_message.reply_text(text=f'–í–µ—Ä–Ω—É–ª—Å—è {master_id}? –ß—Ç–æ —Ç—ã —Ç–µ–ø–µ—Ä—å —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?',
												  reply_markup=reply_markup)
	return master_selection


""" TODO: New branch
        1. First of all instead of requesting players count, ask what action is perform.
        2. if NEw game return players_count state. and go on
        3. Otherwise return <new_state>. then new conversation flow
"""


async def get_master_select(update: Update, context: CallbackContext):
	print('I am in get_master_select')
	query = update.callback_query
	await query.answer()


	if query.data == 'master_applications':
		query = """
				SELECT game_name, game_id FROM games
				WHERE master_id=?
				"""
		# Execute a request with the selected game type parameter
		result = db.execute_query(query, (context.user_data["master_id"],))
		if result:
			buttons = []

			for game in result:
				button = InlineKeyboardButton(
					game[0], callback_data='game-' + str(game[1]))
				buttons.append(button)

			reply_markup = build_keyboard(buttons, n_per_row=1)


			await update.callback_query.edit_message_text('–í–æ—Ç —Ç–≤–æ–∏ –∑–∞—è–≤–∫–∏!', reply_markup=reply_markup)
			return game_editing
		else:
			await update.callback_query.edit_message_text('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã =(')
			time.sleep(3)
			return await start_master_conversation(update, context, is_first_time=False)


	elif query.data == 'new_master_application':
		await update.callback_query.edit_message_text(
			text="‚úçÔ∏è –†–∞–∑ –≤—ã –∑–¥–µ—Å—å –∏ –∏—â–µ—Ç–µ –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–æ–≤ ‚Äì –∑–Ω–∞—á–∏—Ç, —á—Ç–æ-—Ç–æ —Å—Ç—Ä—è—Å–ª–æ—Å—å? –° –∫–∞–∫–∏–º –¥–µ–ª–æ–º –≥–∏–ª—å–¥–∏—è –º–æ–∂–µ—Ç –≤–∞–º –ø–æ–º–æ—á—å? (_–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—è–¥—É—â–µ–π –∏–≥—Ä—ã_)",
			parse_mode="Markdown",
			# reply_markup=InlineKeyboardMarkup(
			# 	[
			# 		[
			# 			InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_role_selection"),
			# 			# InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel") # TODO Optional
			# 		]
			# 	]
			# )
		)

		return master_input_game_name


async def show_master_application(update: Update, context: CallbackContext, game_id=None):
	print('I am in show_master_select')
	if game_id is None:
		query = update.callback_query
		context.user_data['game_to_edit'] = int(query.data[5:])
	else:
		context.user_data['game_to_edit'] = game_id

	query = """
					SELECT
						game_name,
						players_count,
						system,
						setting,
						game_type,
						time,
						cost,
						experience,
						free_text,
						image_url 
					FROM games
					WHERE game_id=?
					"""

	game = db.execute_query(query, (context.user_data["game_to_edit"],))[0]

	keys = keys_map.copy()
	keys.pop('master_id')
	image_url = None
	temp_string = ''
	for i, key in enumerate(keys):
		if key != 'image_url':
			temp_string += keys_map[key] + ': ' + str(game[i]) + '\n'
		else:
			image_url = game[i]

	time.sleep(1)
	reply_keyboard = [
		[
			InlineKeyboardButton("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
								 callback_data="edit_game"),
			InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É",
								 callback_data="delete_game"),
			InlineKeyboardButton("–í—ã–π—Ç–∏",
								 callback_data="cancel_edit_game"),
		]
	]
	reply_markup = InlineKeyboardMarkup(reply_keyboard)

	await update.effective_message.delete()
	if image_url:

		await update.effective_message.reply_photo(caption=str(temp_string), photo=image_url, reply_markup=reply_markup)
	else:

		await update.effective_message.reply_text(temp_string, reply_markup=reply_markup)

	return editing_iteration_start


async def show_master_editing_options(update: Update, context: CallbackContext):
	print('I am in master_edit_game')

	buttons = [InlineKeyboardButton(key[1], callback_data=key[0]) for key in keys_map.items() if key[0] != 'master_id']
	reply_markup = build_keyboard(buttons)
	await update.effective_message.reply_text('–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=reply_markup)
	return editing_iteration_input


async def handle_master_editing_option(update: Update, context: CallbackContext):
	print('I am in edit_game')
	query = update.callback_query.data
	await update.callback_query.edit_message_text('–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
	context.user_data['value_to_edit'] = query
	return editing_iteration_finish


async def get_new_value_from_master(update: Update, context: CallbackContext):
	print('I am in master_new_data')
	# TODO check input for all options
	query = f"""
    		UPDATE games
    		SET {context.user_data['value_to_edit']} = ?
    		WHERE game_id = ?;
			"""
	result = db.execute_query(query, (update.effective_message.text, context.user_data['game_to_edit']))
	print(result)
	return await show_master_application(update, context, context.user_data['game_to_edit'])


async def exit_editing_loop(update: Update, context: CallbackContext):
	print('I am in exit_editing_loop')
	await update.effective_message.reply_text('–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!')
	return await start_master_conversation(update, context, False)


async def delete_game(update: Update, context: CallbackContext):
	print('I am in delete_game')
	query = f"""
			DELETE FROM games
			WHERE game_id = ?;
			"""
	result = db.execute_query(query, (context.user_data["game_to_edit"],))
	await update.callback_query.edit_message_text('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ :(')
	return await start_master_conversation(update, context)


async def get_game_name_from_master(update: Update, context: CallbackContext) -> int:
	print('im in get_game_name')

	context.user_data["game_name"] = update.effective_message.text
	await update.effective_message.reply_text(
		'üë®‚Äçüë®‚Äçüë¶‚Äçüë¶ –£—Ö, –∑–≤—É—á–∏—Ç —Å–µ—Ä—å—ë–∑–Ω–æ! –¢—É—Ç –Ω—É–∂–Ω–∞ —Ü–µ–ª–∞—è –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω—Ü–µ–≤‚Ä¶ –°–∫–æ–ª—å–∫–æ, –∫–∞–∫ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ? (_–£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –µ—Å—Ç—å –Ω–∞ –≤–∞—à—É –∏–≥—Ä—É_)',
		parse_mode="Markdown"
	)
	return master_input_players_count


async def get_players_count_from_master(update: Update, context: CallbackContext) -> int:
	print(update.message.text)

	if not re.match(r'^\s*\d+(-\d+)?$', update.message.text):
		await update.effective_message.reply_text(
			'–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä 4-5 –∏ —Ç–¥.',
		)
		return master_input_players_count
	# Save the players_count
	context.user_data["players_count"] = update.effective_message.text

	await update.effective_message.reply_text(
		'üé≤ –ü–æ–Ω–∏–º–∞—é –≤–∞—à—É —Å–ø–µ—à–∫—É, –Ω–æ –Ω—É–∂–Ω–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º. –£ –Ω–∞—Å —Ç—É—Ç —Å–∏—Å—Ç–µ–º–∞, –∑–Ω–∞–µ—Ç–µ –ª–∏! (_–£–∫–∞–∂–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º–µ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤–µ—Å—Ç–∏ –∏–≥—Ä—É_)',
		parse_mode="Markdown"
	)
	return master_input_system


async def get_system_from_master(update: Update, context: CallbackContext) -> int:
	print(update.effective_message.text)

	context.user_data["system"] = update.effective_message.text
	await update.effective_message.reply_text(
		'üåê –¢–∞–∫-—Ç–∞–∫, –∏ –∫—É–¥–∞ –∂–µ –ø—Ä–∏–¥—ë—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞—à–∏–º –¥–æ–±–ª–µ—Å—Ç–Ω—ã–º –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–∞–º? (_–ü–∞—Ä–æ–π —Å–ª–æ–≤ –æ–ø–∏—à–∏—Ç–µ —Å–µ—Ç—Ç–∏–Ω–≥ –∏/–∏–ª–∏ –∂–∞–Ω—Ä –≤–∞—à–µ–π –∏–≥—Ä—ã_)',
		parse_mode="Markdown"
	)
	return master_input_setting


async def get_setting_from_master(update: Update, context: CallbackContext) -> int:
	print(update.effective_message.text)

	context.user_data["setting"] = update.effective_message.text
	reply_keyboard = [
		[
			InlineKeyboardButton("–í–∞–Ω—à–æ—Ç", callback_data="–í–∞–Ω—à–æ—Ç"),
			InlineKeyboardButton("–ö–∞–º–ø–∞–Ω–∏—è", callback_data="–ö–∞–º–ø–∞–Ω–∏—è"),
			InlineKeyboardButton("–ú–æ–¥—É–ª—å", callback_data="–ú–æ–¥—É–ª—å"),
		]
	]
	reply_markup = InlineKeyboardMarkup(reply_keyboard)
	await update.effective_message.reply_text(
		'‚è≥ –ü–æ—Ö–æ–∂–µ, –¥–µ–ª–æ –Ω–µ–±—ã—Å—Ç—Ä–æ–µ‚Ä¶ –ù–∞–¥–æ–ª–≥–æ –ª–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —É—Å–ª—É–≥–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω—Ü–µ–≤ –≥–∏–ª—å–¥–∏–∏? (_–£–∫–∞–∂–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã: –≤–∞–Ω-—à–æ—Ç, –º–æ–¥—É–ª—å –∏–ª–∏ –∫–∞–º–ø–∞–Ω–∏—è_)',
		parse_mode="Markdown",
		reply_markup=reply_markup,
	)

	return master_input_game_type


async def get_game_type_from_master(update: Update, context: CallbackContext) -> int:
	# print(update.effective_message.text)
	query = update.callback_query
	await query.answer()
	context.user_data["game_type"] = query.data
	# –ß–µ–∫–Ω—É—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –¥–∞—Ç—ã
	await update.effective_message.reply_text(
		'üìÜ –•–æ—Ä–æ—à–æ, –∑–∞–ø–∏—Å–∞–ª‚Ä¶ –ò –∫–æ–≥–¥–∞ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –ø—É—Ç—å? (_–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ –¥–∞—Ç—ã –∏/–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –∏–≥—Ä—ã_)',
		parse_mode="Markdown",
	)
	return master_input_time


async def get_time_from_master(update: Update, context: CallbackContext) -> int:
	print(update.effective_message.text)

	context.user_data["time"] = update.effective_message.text
	await update.effective_message.reply_text(
		'üí∞ –û—Å—Ç–∞–ª–∞—Å—å –ø–∞—Ä–∞ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π. –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —Å –ø—Ä–∏–∫–ª—é—á–µ–Ω—Ü–µ–≤ —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π –≤–∑–Ω–æ—Å? –ê —Ç–æ, –∑–Ω–∞–µ—Ç–µ –ª–∏, –±—ã–≤–∞–ª–∏ —Å–ª—É—á–∞–∏‚Ä¶ (_–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –∑–∞ –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –∏–≥—Ä–æ–∫–∞_)',
		parse_mode="Markdown",
	)
	return master_input_cost


async def get_cost_from_master(update: Update, context: CallbackContext) -> int:
	print(update.effective_message.text)

	context.user_data["cost"] = update.effective_message.text
	await update.effective_message.reply_text(
		'üåü –í–∞—à–µ –¥–µ–ª–æ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏, –∑–Ω–∞–µ—Ç–µ –ª–∏‚Ä¶ –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –Ω—É–∂–Ω—ã –≤–∞—à–∏–º –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–∞–º? (_–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –æ–ø—ã—Ç –∏/–∏–ª–∏ —Å—Ç–∏–ª—å –∏–≥—Ä—ã –≤–∞—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤_)',
		parse_mode="Markdown",

	)
	return master_input_experience


async def get_experience_from_master(update: Update, context: CallbackContext) -> int:
	print(update.effective_message.text)

	context.user_data["experience"] = update.effective_message.text
	await update.effective_message.reply_text(
		'üñºÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π —à—Ç—Ä–∏—Ö: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –≤–∞—à—É –≥–µ—Ä–±–æ–≤—É—é –ø–µ—á–∞—Ç—å, –ø–æ—Ä—Ç—Ä–µ—Ç –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–∞ –∏ –∫–∞—Ä—Ç—É –º–µ—Å—Ç–Ω–æ—Å—Ç–∏. –ü—Ä–∏–∫–ª—é—á–µ–Ω—Ü–∞–º –Ω—É–∂–Ω—ã –∑–∞—Ü–µ–ø–∫–∏, –∑–Ω–∞–µ—Ç–µ –ª–∏! (_–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç_)',
		parse_mode="Markdown",
	)
	return master_input_image


async def get_image_from_master(update: Update, context: CallbackContext) -> int:
	image = update.effective_message.photo[-1]
	file = await context.bot.get_file(image.file_id)
	await file.download_to_drive(f'./images/{image.file_id}.jpg')
	context.user_data["image_url"] = f'./images/{image.file_id}.jpg'
	await update.effective_message.reply_text(
		'üìú –§–æ—Ä–º—É–ª—è—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω! –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø–æ—á—Ç–æ–≤—ã—Ö —è—Å—Ç—Ä–µ–±–æ–≤ ‚Äì –∞ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è –≤–∞—à–µ–π –±—É–¥—É—â–µ–π –≥—Ä—É–ø–ø—ã –≥–µ—Ä–æ–µ–≤. (_–û—Å—Ç–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–≥—Ä—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∏–≥—Ä–æ–∫–∞–º –∏ –∏–Ω–æ–µ, —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º_)',
		parse_mode="Markdown",
	)
	return master_input_free_text


async def get_free_text_from_master(update: Update, context: CallbackContext) -> int:
	print(update.effective_message.text)

	context.user_data["free_text"] = update.effective_message.text

	# Prepare a summary of the collected data
	output_string = ''
	for key, value in context.user_data.items():
		if key != 'image_url':
			if key == 'master_id':
				output_string += keys_map[key] + ': ' + '@' + str(value) + '\n'
			else:
				output_string += keys_map[key] + ": " + value + '\n'

	# Send the summary back to the master
	await update.effective_message.reply_photo(
		caption=output_string, photo=context.user_data['image_url']
	)

	# Send message with summary to main resiever
	await context.bot.send_photo(evgeniya_tiamat_id, photo=context.user_data['image_url'],
								 caption="‚ùóÔ∏è–ù–æ–≤—ã–π –∞–Ω–æ–Ω—Å –ø–æ–ª—É—á–µ–Ω‚ùóÔ∏è\n" + output_string)

	await context.bot.send_photo(dadjezz_id, photo=context.user_data['image_url'],
								 caption="‚ùóÔ∏è–ù–æ–≤—ã–π –∞–Ω–æ–Ω—Å –ø–æ–ª—É—á–µ–Ω‚ùóÔ∏è\n" + output_string)

	await context.bot.send_photo(igor_krivic_id, photo=context.user_data['image_url'],
								 caption="‚ùóÔ∏è–ù–æ–≤—ã–π –∞–Ω–æ–Ω—Å –ø–æ–ª—É—á–µ–Ω‚ùóÔ∏è\n" + output_string)
	# Insert the data into the database
	query = f"""
            INSERT INTO games (master_id, game_name, players_count, system, setting, game_type, time, cost, experience, image_url, free_text)
            VALUES (?,?,?,?,?,?,?,?,?,?,?)
            """
	try:
		db.execute_query(query, tuple(context.user_data.values()))
	except Exception as e:
		print(e)
	await update.effective_message.reply_text(
		'–°–ø–∞—Å–∏–±–æ! –í–∞—à –∞–Ω–æ–Ω—Å –ø—Ä–∏–Ω—è—Ç. –ù–∞–∂–º–∏ /start –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.',
	)

	return ConversationHandler.END


async def start_player_conversation(update: Update, context: CallbackContext):
	print("player")

	reply_keyboard = [
		[
			InlineKeyboardButton("–ü–æ–∏—Å–∫", callback_data="search"),
			# InlineKeyboardButton("–ó–∞—è–≤–∫–∞", callback_data="application"),
		],
		[
			InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_again"),
		]
	]
	reply_markup = InlineKeyboardMarkup(reply_keyboard)

	new_message_text = "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
	await update.callback_query.edit_message_text(text=new_message_text, reply_markup=reply_markup)

	return player_selection


async def handle_player_selection(update: Update, context: CallbackContext):
	print("second_selection")
	if update.callback_query.data == 'application':
		return await start_player_application(update, context)
	elif update.callback_query.data == 'search':
		return await start_player_search(update, context)



async def start_player_application(update: Update, context: CallbackContext) -> int:
	query = update.callback_query
	query.answer()
	print("start_player_conversation() called")
	context.user_data.clear()
	await update.callback_query.edit_message_text(
		text="üòÄ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ —Ä—è–¥–∞—Ö –≥–∏–ª—å–¥–∏–∏ ‚Äì –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –Ω–æ–≤—ã–º –≥–µ—Ä–æ—è–º! –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. (_–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –∏/–∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º_)",
		parse_mode="Markdown",
	)

	return player_name_input


async def get_player_name(update: Update, context: CallbackContext) -> int:
	print("get_player_name() called")

	print(update.effective_message.text)

	context.user_data["player_name"] = update.effective_message.text
	# await update.callback_query.edit_message_text(text="–ö–∞–∫ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è?")
	await update.effective_message.reply_text(
		text="‚úçÔ∏è –ö–æ–≥–¥–∞ –º—ã –Ω–∞–π–¥—ë–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—Å—Ç—Ä–µ–±–∞? (_–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤ –¢–ì –∏/–∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏_)",
		parse_mode="Markdown",
	)
	return player_contact_input


async def get_contact_from_player(update: Update, context: CallbackContext) -> int:
	print("get_player_contact() called")
	print(update.effective_message.text)

	context.user_data["contact"] = update.effective_message.text

	reply_keyboard = [
		[
			InlineKeyboardButton("–í–∞–Ω—à–æ—Ç", callback_data="–í–∞–Ω—à–æ—Ç"),
			InlineKeyboardButton("–ö–∞–º–ø–∞–Ω–∏—è", callback_data="–ö–∞–º–ø–∞–Ω–∏—è"),
			InlineKeyboardButton("–ú–æ–¥—É–ª—å", callback_data="–ú–æ–¥—É–ª—å"),
		]
	]
	reply_markup = InlineKeyboardMarkup(reply_keyboard)

	await update.message.reply_text(
		"‚è≥–ü–æ—Ö–æ–¥—ã –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –±—ã–≤–∞—é—Ç –¥–æ–ª–≥–∏–º–∏, –∑–Ω–∞–µ—Ç–µ –ª–∏! –ö–∞–∫ –Ω–∞–¥–æ–ª–≥–æ –≤—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–ª—É—á–∏—Ç—å—Å—è? (_–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã: –≤–∞–Ω-—à–æ—Ç, –º–æ–¥—É–ª—å –∏–ª–∏ –∫–∞–º–ø–∞–Ω–∏—è_)",
		parse_mode="Markdown",
		reply_markup=reply_markup,
	)
	return player_game_type_input


async def get_game_type_from_player(update: Update, context: CallbackContext) -> int:
	print("get_game_type() called")

	print(update.effective_message.text)

	context.user_data["game_type"] = update.effective_message.text

	await update.callback_query.edit_message_text(
		text='üåê –ö–∞–∫–æ–≥–æ —Ä–æ–¥–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? –ü–æ–¥–≤–∏–≥—É –≤–µ–∑–¥–µ –µ—Å—Ç—å –º–µ—Å—Ç–æ! (_–í –ø–∞—Ä–µ —Å–ª–æ–≤ –æ–ø–∏—à–∏—Ç–µ, –≤ –∫–∞–∫–æ–º —Å–µ—Ç—Ç–∏–Ω–≥–µ –∏/–∏–ª–∏ –∂–∞–Ω—Ä–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å—ã–≥—Ä–∞—Ç—å_)',
		parse_mode="Markdown",
	)
	return players_system_input


async def get_system_from_player(update: Update, context: CallbackContext) -> int:
	print("get_system_type() called")

	print(update.effective_message.text)

	context.user_data["system"] = update.effective_message.text
	await update.effective_message.reply_text(
		'üìÜ –î–æ–∂–∏–ª–∏: –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é‚Ä¶ –í –º–æ—ë –≤—Ä–µ–º—è –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç –±—ã–ª –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤, –∑–Ω–∞–µ—Ç–µ –ª–∏! (_–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–µ –¥–∞—Ç—ã –∏/–∏–ª–∏ –≤—Ä–µ–º—è –¥–ª—è –∏–≥—Ä—ã_)',
		parse_mode="Markdown",
	)
	return player_time_input


async def get_time_from_player(update: Update, context: CallbackContext) -> int:
	print("get_time() called")

	print(update.effective_message.text)

	context.user_data["time"] = update.effective_message.text
	await update.effective_message.reply_text(
		'üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å: –≥–∏–ª—å–¥–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∑–Ω–æ—Å—ã –æ—Ç –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–æ–≤ ‚Äì —Å–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –≤–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—à—É –∫–∞–∑–Ω—É? (_–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –∑–∞ –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é_)',
		parse_mode="Markdown",
	)
	return player_price_input


async def get_price_from_player(update: Update, context: CallbackContext) -> int:
	print("get_price() called")

	print(update.effective_message.text)

	context.user_data["price"] = update.effective_message.text
	await update.effective_message.reply_text(
		'üìú –§–æ—Ä–º—É–ª—è—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω! –ü–æ–∫–∞ —á–µ—Ä–Ω–∏–ª–∞ —Å–æ—Ö–Ω—É—Ç ‚Äì —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ? –ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç—ã –±—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã–µ, –∑–Ω–∞–µ—Ç–µ –ª–∏! (_–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –æ–ø—ã—Ç, –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—Ç –∏–≥—Ä—ã, –Ω–∞—Å—Ç–æ–ª—å–Ω–æ-—Ä–æ–ª–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –∏–Ω–æ–µ, —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º_)',
		parse_mode="Markdown",
	)
	return player_free_text_input


async def get_free_text_from_player(update: Update, context: CallbackContext) -> int:
	print("get_free_text() called")

	print(update.effective_message.text)

	context.user_data["free_text"] = update.effective_message.text
	await update.effective_message.reply_text(
		'–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.',
	)
	# Prepare a summary of the collected data
	output_string = ''
	for key, value in context.user_data.items():  # ("key", "value")
		output_string += players_keys[key] + ": " + value + '\n'
	# Send the summary back to the master
	await update.effective_message.reply_text(
		output_string,
	)

	# Send message with summary to main resiever
	# await context.bot.send_message(chat_id, "–ù–æ–≤—ã–π –∞–Ω–æ–Ω—Å –ø–æ–ª—É—á–µ–Ω:\n" + output_string)
	# Insert the data into the database
	query = f"""
            INSERT INTO players_requests (player_name, contact, game_type, system, time, price, free_text)
            VALUES (?,?,?,?,?,?,?)
            """
	try:
		db.execute_query(query, tuple(context.user_data.values()))
	except Exception as e:
		print(e)
	# End the conversation
	return ConversationHandler.END


async def start_player_search(update: Update, context: CallbackContext) -> int:

	print("start_search_conversation")
	question_keyboard = [
		[
			InlineKeyboardButton('–ü–æ–∫–∞–∂–∏ –º–Ω–µ –≤—Å–µ –∏–≥—Ä—ã',
							  callback_data='–ü–æ–∫–∞–∂–∏ –º–Ω–µ –≤—Å–µ –∏–≥—Ä—ã')
		],
		[
			InlineKeyboardButton('–Ø —Ö–æ—á—É –≤—ã–±—Ä–∞—Ç—å –ø–æ —Ñ–∏–ª—å—Ç—Ä—É',
								 callback_data='–Ø —Ö–æ—á—É –≤—ã–±—Ä–∞—Ç—å –ø–æ —Ñ–∏–ª—å—Ç—Ä—É'),
		],
		# [
		# 	InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='start_again')
		# ]
	]
	reply_markup = InlineKeyboardMarkup(question_keyboard)
	await update.effective_message.reply_text(
		'–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:',
		reply_markup=reply_markup,
	)
	return player_search


async def get_player_selection(update: Update, context: CallbackContext) -> int:

	query = update.callback_query
	# –¥–µ–ª–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if query.data == '–ü–æ–∫–∞–∂–∏ –º–Ω–µ –≤—Å–µ –∏–≥—Ä—ã':
		# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
		list_player = get_game_announcement()
		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		for player in list_player:
			if player[1] is None:
				await update.effective_message.reply_text(str(player[0]))
			else:
				await update.effective_message.reply_photo(caption=str(player[0]), photo=player[1])
			await asyncio.sleep(0.5)
		await update.effective_message.reply_text("–ù–∞ —ç—Ç–æ–º –≤—Å–µ. –ù–∞–∂–º–∏ /start –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
		return ConversationHandler.END
	else:
		question_keyboard = [
			[
				InlineKeyboardButton('–í–∞–Ω—à–æ—Ç', callback_data='–í–∞–Ω—à–æ—Ç'),
				InlineKeyboardButton('–ö–∞–º–ø–∞–Ω–∏—è', callback_data='–ö–∞–º–ø–∞–Ω–∏—è'),
				InlineKeyboardButton('–ú–æ–¥—É–ª—å', callback_data='–ú–æ–¥—É–ª—å'),
			]
		]
		reply_markup = InlineKeyboardMarkup(question_keyboard)
		await update.effective_message.reply_text(
			"–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∏–≥—Ä—ã:",
			reply_markup=reply_markup,
		)
		return search_type_input


def get_game_announcement() -> list:
	# Query to get games of the selected type from the database
	query = """
            SELECT master_id, game_name, players_count, system, setting, game_type, time, cost, experience, free_text, image_url FROM games
            """
	# Execute a request with the selected game type parameter
	result = db.execute_query(query)
	list_player = []
	# Generating a list of games to display to the user
	for game in result:
		temp_string = ''
		for i, key in enumerate(keys_map):

			if key != 'image_url':
				if key == 'master_id':
					temp_string += keys_map[key] + ': ' + '@' + str(game[i]) + '\n'
				else:
					temp_string += keys_map[key] + ': ' + str(game[i]) + '\n'
			else:
				image_url = game[i]
		list_player.append((temp_string, image_url))
	print(result)
	# Sending a list of available games to the user
	# Ending the dialogue
	return list_player


async def get_search_type(update: Update, context: CallbackContext) -> int:
	print(update.callback_query.data)
	context.user_data["game_type"] = player_choise_type = update.callback_query.data
	query = """
            SELECT DISTINCT system FROM games WHERE game_type=?
            """
	result = db.execute_query(query, (player_choise_type,))

	if not result:
		await update.effective_message.reply_text(
			"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä."
		)
		return ConversationHandler.END

	buttons = []

	for system in result:
		button = InlineKeyboardButton(
			system[0], callback_data='system-' + system[0])
		buttons.append(button)

	print(buttons)
	reply_markup = InlineKeyboardMarkup([buttons])
	await update.effective_message.reply_text(
		"–ö–∞–∫–∞—è —Å–∏—Å—Ç–µ–º–∞?",
		reply_markup=reply_markup,
	)
	return search_system_input


async def get_search_system(update: Update, context: CallbackContext) -> int:
	# print(update.effective_message.text)
	context.user_data["game_system"] = player_choise_system = update.callback_query.data[len(
		"system-"):]

	query = """
            SELECT DISTINCT cost FROM games WHERE game_type=? AND system=? ORDER BY cost ASC;
            """
	result = db.execute_query(
		query, (context.user_data["game_type"], player_choise_system))
	print(result)

	buttons = []

	for cost in result:
		button = InlineKeyboardButton(
			cost[0], callback_data='cost-' + str(cost[0]))
		buttons.append(button)

	print(buttons)
	reply_markup = InlineKeyboardMarkup([buttons])

	await update.effective_message.reply_text(
		"–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å?",
		reply_markup=reply_markup,
	)
	return search_price_input


async def get_search_price(update: Update, context: CallbackContext) -> int:
	# print("get_search_price: " + update.effective_message.text)
	player_choise_price = update.callback_query.data[len("cost-"):]
	query = """
            SELECT 
            		master_id,
            		game_name,
            		players_count,
            		system,
            		setting,
            		game_type,
            		time,
            		cost,
            		experience,
            		free_text,
            		image_url 
            FROM games 
            WHERE game_type=? AND system=? AND cost=?;
            """
	result = db.execute_query(
		query, (context.user_data["game_type"], context.user_data["game_system"], player_choise_price))

	for game in result:
		image_url = None
		temp_string = ''
		for i, key in enumerate(keys_map):
			if key != 'image_url':
				temp_string += keys_map[key] + ': ' + str(game[i]) + '\n'
			else:
				image_url = game[i]
		if image_url:
			await update.effective_message.reply_photo(caption=str(temp_string), photo=image_url)
		else:
			await update.effective_message.reply_text(temp_string)
	await update.effective_message.reply_text("–ù–∞ —ç—Ç–æ–º –≤—Å–µ. –ù–∞–∂–º–∏ /start –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
	return ConversationHandler.END


async def cancel(update: Update, context: CallbackContext) -> int:
	print("END")
	await update.effective_message.reply_text('–ü–æ–∫–∞!')
	return ConversationHandler.END
